import {
    Component, Output, Input, EventEmitter, Inject, forwardRef, AfterContentInit, AfterViewInit, ElementRef,
    Renderer, ViewChildren, ContentChild, QueryList, ContentChildren, TemplateRef, ViewChild
} from '@angular/core';
import { LcwCalculateSummaryArg } from './lcw-grid-summary-context';
import { LcwGridComponent, ColumnInfo } from "./lcw-grid.component";

@Component({
    moduleId: module.id,
    selector: 'lcw-grid-summary',
    template: ''
})
export class LcwGridSummaryComponent implements AfterViewInit {
    public static separator = ';';
    public static autoGenerated = 'auto';
    @Input() name: string;
    @Input() title: string;
    @Input() onCalculate: (arg: LcwCalculateSummaryArg) => any;

    @Input() columns: string = null;
    @Input() groups: string = null;
    @Input() operator: LcwGridSummaryOperators = LcwGridSummaryOperators.None;

    private _columnItems: string[];
    private _groupItems: string[];

    getColumnItems(): string[] {
        if (this._columnItems)
            return this._columnItems;
        return this._columnItems = (this.columns == null) ? null : this.columns.split(LcwGridSummaryComponent.separator);
    }

    getGroupItems(): string[] {
        if (this._groupItems)
            return this._groupItems;
        return this._groupItems = (this.groups == null) ? null : this.groups.split(LcwGridSummaryComponent.separator);
    }

    constructor( @Inject(forwardRef(() => LcwGridComponent)) private _parent: LcwGridComponent) {
    }

    ngAfterViewInit() {
        this._parent.summaries.push({ name: this.name, title: this.title, columns: this.columns, groups: this.groups, calculate: this.onCalculate, operator: this.operator });
    }
}

export class GridSummary {
    name: string;
    title: string;
    columns: string;
    groups: string;
    //calculate: EventEmitter<LcwCalculateSummaryArg>;
    calculate: (arg: LcwCalculateSummaryArg) => any;
    operator: LcwGridSummaryOperators;
    titleColumnToMerge?: number = 0;

    

}

export class SummaryOperatorsCalculator {
    static calculate(operator: LcwGridSummaryOperators, arg: LcwCalculateSummaryArg): any {
        let result: any;
        switch (operator) {
            case LcwGridSummaryOperators.Min:
                result = new MinOperator().calculate(arg);
                break;
            case LcwGridSummaryOperators.Max:
                result = new MaxOperator().calculate(arg);
                break;
            case LcwGridSummaryOperators.Sum:
                result = new SumOperator().calculate(arg);
                break;
            case LcwGridSummaryOperators.Avg:
                result = new AvgOperator().calculate(arg);
                break;
        }
        return result;
    }

}

export enum LcwGridSummaryOperators {
    None,
    Sum,
    Avg,
    Min,
    Max
    //,Count
}
export interface ILcwGridSummaryOperator {

    calculate: ILcwGridSummaryCalculateDelegate;
}

export interface ILcwGridSummaryCalculateDelegate {
    (arg: LcwCalculateSummaryArg): any;
}




export class SumOperator implements ILcwGridSummaryOperator {
    calculate(arg: LcwCalculateSummaryArg): any {
        if (arg == null)
            return null;
        let toplam = 0;
        for (let value of arg.columnData) {
            toplam += value;
        }
        return toplam;
    }


}

export class AvgOperator implements ILcwGridSummaryOperator {
    calculate(arg: LcwCalculateSummaryArg): any {
        if (arg == null)
            return null;
        let toplam = 0;
        for (let value of arg.columnData) {
            toplam += value;
        }
        return toplam / arg.columnData.length;
    }

}

export class MinOperator implements ILcwGridSummaryOperator {
    calculate(arg: LcwCalculateSummaryArg): any {
        if (arg == null)
            return null;
        let min = 0;
        for (let value of arg.columnData) {
            if (min > value)
                min = value;
        }
        return min;
    }
}

export class MaxOperator implements ILcwGridSummaryOperator {
    calculate(arg: LcwCalculateSummaryArg): any {
        if (arg == null)
            return null;
        let max = 0;
        for (let value of arg.columnData) {
            if (max < value)
                max = value;
        }
        return max;
    }
}